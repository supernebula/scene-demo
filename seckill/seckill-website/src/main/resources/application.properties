server.port=8080

#JDBC
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/scene_seckill?useUnicode=true&characterEncoding=utf8&useSSL=false&allowMultiQueries=true

spring.datasource.username=root
spring.datasource.password=123456

#如何设置spring boot集成 mybatis 然后sql语句打印到控制台，方便调试.com.yelp.dao.mapper为mapper所在的包
logging.level.com.evol.dao.mapper=DEBUG

#Mybatis
mybatis_config_file=mybatis-config.xml
mapper_path=/mapper/**.xml
entity_package=com.evol.entity

# Redis数据库索引（默认为0）
# REDIS（RedisProperties）
# （普通集群，不使用则不用开启）在群集中执行命令时要遵循的最大重定向数目。
# spring.redis.cluster.max-redirects=
# （普通集群，不使用则不用开启）以逗号分隔的“主机：端口”对列表进行引导。
# spring.redis.cluster.nodes=127.0.0.1:1001,127.0.0.1:1002
# 注意：一旦开启了集群模式，那么基于单机的配置就会覆盖。
# 连接工厂使用的数据库索引（默认为0）。
spring.redis.database=0
# 连接URL，将覆盖主机，端口和密码（用户将被忽略），例如：redis://user:password@example.com:6379
spring.redis.url=
# Redis服务器主机。
spring.redis.host=127.0.0.1
# 登录redis服务器的密码（默认为空）。
spring.redis.password=
# 启用SSL支持。
spring.redis.ssl=false
# 池在给定时间可以分配的最大连接数。使用负值无限制。
spring.redis.pool.max-active=8
# 池中“空闲”连接的最大数量。使用负值表示无限数量的空闲连接。
spring.redis.pool.max-idle=8
# 连接分配在池被耗尽时抛出异常之前应该阻塞的最长时间量（以毫秒为单位）。使用负值可以无限期地阻止。
spring.redis.pool.max-wait=-1
# 目标为保持在池中的最小空闲连接数。这个设置只有在正面的情况下才有效果。
spring.redis.pool.min-idle=0
# Redis服务器端口。
spring.redis.port=6379
# （哨兵模式，不使用则不用开启）Redis服务器的名称。
# spring.redis.sentinel.master=
# （哨兵模式，不使用则不用开启）主机：端口对的逗号分隔列表。
# spring.redis.sentinel.nodes=
# 以毫秒为单位的连接超时。
spring.redis.timeout=0

####################################
#
# thymeleaf静态资源配置
#
####################################
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=utf-8
spring.thymeleaf.content-type=text/html
#关闭缓存，即时刷新，上线生产环境需要改为true
#文档地址 https://docs.spring.io/spring-boot/docs/1.5.18.RELEASE/reference/htmlsingle/#using-boot-devtools-property-defaults
spring.thymeleaf.cache=false
# Check that the templates location exists.
spring.thymeleaf.check-template-location=true

#文件上传相关设置
spring.servlet.multipart.max-file-size=10Mb
spring.servlet.multipart.max-request-size=100Mb